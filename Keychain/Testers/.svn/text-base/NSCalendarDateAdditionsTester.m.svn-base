//
//  NSCalendarDateAdditionsTester.m
//  Keychain
//
//  Created by Wade Tregaskis on Tue May 17 2005.
//
//  Copyright (c) 2005 - 2007, Wade Tregaskis.  All rights reserved.
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//    * Neither the name of Wade Tregaskis nor the names of any other contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Keychain/NSCalendarDateAdditions.h>

#import "TestingCommon.h"


#define EPSILON 0.000001


void test_FractionalSeconds(void) {
    NSCalendarDate *date, *reference;
    NSInteger years, months, days, hours, minutes, seconds;
    double fractionalSeconds;
    
    START_TEST("Fractional Seconds Support");
    
    date = [NSCalendarDate dateWithYear:2005 month:5 day:17 hour:15 minute:26 second:11 fractionalSecond:0.0 timeZone:nil];
    
    TEST(nil != date, "+ dateWithYear:month:day:hour:minute:second:fractionalSecond:timeZone: for 3:26:11.0 17/5/2005 (no timezone) returns non-nil");
    
    if (date) {
        TEST(EPSILON > fabs([date fractionalSecond]), "\tResult has fractional second of 0.0");
        
        reference = [NSCalendarDate dateWithYear:2005 month:5 day:17 hour:15 minute:26 second:11 timeZone:nil];

        TEST([reference isEqualToDate:date], "\tResult matches reference NSCalendarDate for 3:26:11 17/5/2005 (no timezone)");
        
        [date years:&years months:&months days:&days hours:&hours minutes:&minutes seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with all fields) returns correct result");
        
        [date years:NULL months:NULL days:NULL hours:NULL minutes:NULL seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with only seconds & fractional seconds) returns correct result");
        
        date = [date dateByAddingYears:1 months:0 days:0 hours:0 minutes:0 seconds:0 fractionalSeconds:0.0];
        
        TEST(nil != date, "\t- dateByAddingYears:months:days:hours:minutes:seconds:fractionalSeconds: for one year ahead returns valid result");
        
        if (date) {
            TEST(![reference isEqualToDate:date], "\t\tResult does not match reference (original date)");
            
            [date years:&years months:&months days:&days hours:&hours minutes:&minutes seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
            
            TEST((1 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with all fields) returns correct result");
        }
    }
    
    date = [NSCalendarDate dateWithYear:2005 month:5 day:17 hour:15 minute:26 second:11 fractionalSecond:0.0 timeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
    
    TEST(nil != date, "+ dateWithYear:month:day:hour:minute:second:fractionalSecond:timeZone: for 3:26:11.0 17/5/2005 GMT returns non-nil");
    
    if (date) {
        TEST(EPSILON > fabs([date fractionalSecond]), "\tResult has fractional second of 0.0");

        reference = [NSCalendarDate dateWithYear:2005 month:5 day:17 hour:15 minute:26 second:11 timeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
        
        TEST([reference isEqualToDate:date], "\tResult matches reference NSCalendarDate for 3:26:11 17/5/2005 GMT");
        
        [date years:&years months:&months days:&days hours:&hours minutes:&minutes seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with all fields) returns correct result");
        
        [date years:NULL months:NULL days:NULL hours:NULL minutes:NULL seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with only seconds & fractional seconds) returns correct result");
        
        date = [date dateByAddingYears:0 months:0 days:0 hours:0 minutes:0 seconds:0 fractionalSeconds:0.23];
        
        TEST(nil != date, "\t- dateByAddingYears:months:days:hours:minutes:seconds:fractionalSeconds: for 0.23 seconds ahead returns valid result");
        
        if (date) {
            TEST(![reference isEqualToDate:date], "\t\tResult does not match reference (original date)");
            
            [date years:&years months:&months days:&days hours:&hours minutes:&minutes seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
            
            TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds - 0.23)), "\t\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with all fields) returns correct result");
        }
    }
    
    date = [NSCalendarDate dateWithYear:2005 month:5 day:17 hour:15 minute:26 second:11 fractionalSecond:0.23 timeZone:nil];
    
    TEST(nil != date, "+ dateWithYear:month:day:hour:minute:second:fractionalSecond:timeZone: for 3:26:11.23 17/5/2005 (no timezone) returns non-nil");
    
    if (date) {
        TEST(EPSILON > (fabs([date fractionalSecond] - 0.23)), "\tResult has fractional second of 0.23");

        reference = [NSCalendarDate dateWithYear:2005 month:5 day:17 hour:15 minute:26 second:11 timeZone:nil];
        
        TEST(![reference isEqualToDate:date], "\tResult does not match reference NSCalendarDate for 3:26:11 17/5/2005 (no timezone)");
        
        [date years:&years months:&months days:&days hours:&hours minutes:&minutes seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds - 0.23)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with all fields) returns correct result");
        
        [date years:NULL months:NULL days:NULL hours:NULL minutes:NULL seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == seconds) && (EPSILON > fabs(fractionalSeconds - 0.23)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with only seconds & fractional seconds) returns correct result");
        
        reference = [reference addTimeInterval:0.23];
        
        TEST([reference isEqualToDate:date], "\tResult matches reference NSCalendarDate for 3:26:11.23 17/5/2005 (no timezone)");
        
        [date years:&years months:&months days:&days hours:&hours minutes:&minutes seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with all fields) returns correct result");
        
        [date years:NULL months:NULL days:NULL hours:NULL minutes:NULL seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with only seconds & fractional seconds) returns correct result");
        
        date = [date dateByAddingYears:0 months:0 days:0 hours:0 minutes:0 seconds:-5 fractionalSeconds:0.0];
        
        TEST(nil != date, "\t- dateByAddingYears:months:days:hours:minutes:seconds:fractionalSeconds: for 5 seconds behind returns valid result");
        
        if (date) {
            TEST(![reference isEqualToDate:date], "\t\tResult does not match reference (original date)");
            
            [date years:&years months:&months days:&days hours:&hours minutes:&minutes seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
            
            TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (-5 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with all fields) returns correct result");
            
            [date years:NULL months:NULL days:NULL hours:NULL minutes:NULL seconds:NULL fractionalSeconds:&fractionalSeconds sinceDate:reference];
            
            printf("result = %f\n", fractionalSeconds);
            
            TEST(EPSILON > fabs(fractionalSeconds + 5.0), "\t\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with only fractional seconds) returns correct result");
        }
    }
    
    date = [NSCalendarDate dateWithYear:2005 month:5 day:17 hour:15 minute:26 second:11 fractionalSecond:0.23 timeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
    
    TEST(nil != date, "+ dateWithYear:month:day:hour:minute:second:fractionalSecond:timeZone: for 3:26:11.23 17/5/2005 GMT returns non-nil");
    
    if (date) {
        TEST(EPSILON > (fabs([date fractionalSecond] - 0.23)), "\tResult has fractional second of 0.23");

        reference = [NSCalendarDate dateWithYear:2005 month:5 day:17 hour:15 minute:26 second:11 timeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
        
        TEST(![reference isEqualToDate:date], "\tResult does not match reference NSCalendarDate for 3:26:11 17/5/2005 GMT");
        
        [date years:&years months:&months days:&days hours:&hours minutes:&minutes seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds - 0.23)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with all fields) returns correct result");
        
        [date years:NULL months:NULL days:NULL hours:NULL minutes:NULL seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds - 0.23)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with only seconds & fractional seconds) returns correct result");
        
        reference = [reference addTimeInterval:0.23];
        
        TEST([reference isEqualToDate:date], "\tResult matches reference NSCalendarDate for 3:26:11.23 17/5/2005 GMT");
        
        [date years:&years months:&months days:&days hours:&hours minutes:&minutes seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with all fields) returns correct result");
        
        [date years:NULL months:NULL days:NULL hours:NULL minutes:NULL seconds:&seconds fractionalSeconds:&fractionalSeconds sinceDate:reference];
        
        TEST((0 == years) && (0 == months) && (0 == days) && (0 == hours) && (0 == minutes) && (0 == seconds) && (EPSILON > fabs(fractionalSeconds)), "\t- years:months:days:hours:minutes:seconds:fractionalSeconds:sinceDate: (with only seconds & fractional seconds) returns correct result");
    }

    reference = [NSCalendarDate dateWithYear:2005 month:5 day:17 hour:15 minute:26 second:11 timeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];

    date = [reference dateByAddingYears:5 months:3 days:15 hours:-6 minutes:-54 seconds:0 fractionalSeconds:0.0];
    reference = [reference dateByAddingYears:5 months:3 days:15 hours:-6 minutes:-54 seconds:0];
    
    TEST([date isEqualToDate:reference], "dateByAddingYears:months:days:hours:minutes:seconds:fractionalSeconds: is equivalent to dateByAddingYears:months:days:hours:minutes:seconds: when fractionalSeconds argument is 0.0");
    
    END_TEST();
}

void test_ClassicMacDateTimes(void) {
	START_TEST("Classic-Mac date-times");
	
	NSCalendarDate *date, *dateCheck;
	int64_t longDateTime, longDateTimeCheck;
	NSCalendarDate *absoluteReferenceDate = [NSCalendarDate dateWithYear:1904 month:1 day:1 hour:0 minute:0 second:0 timeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
	NSCalendarDate *testDate = [NSCalendarDate dateWithYear:2007 month:9 day:16 hour:1 minute:27 second:25 timeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
	
	longDateTime = (int64_t)[testDate timeIntervalSinceDate:absoluteReferenceDate];
	
	date = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:nil];
	
	TEST(nil != date, "Able to create date using dateWithClassicMacLongDateTime and test date");
	
	if (nil != date) {
		TEST([date isEqualToDate:testDate], "Date is correct");
		
		if (![date isEqualToDate:testDate]) {
			TEST_NOTE("\tDate is incorrectly: %s", [[date description] UTF8String]);
		} else {
			longDateTimeCheck = [date classicMacLongDateTimeForTimeZone:nil];
			
			TEST(longDateTime == longDateTimeCheck, "Date can be converted back to Classic long-datetime again");
			
			if (longDateTime != longDateTimeCheck) {
				TEST_NOTE("\tResult is %lld, expected %lld", (long long)longDateTimeCheck, (long long)longDateTime);
			}
		}
	}
	
	
	longDateTime = 0;
	
	date = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:nil];
	
	TEST(nil != date, "Able to create date using dateWithClassicMacLongDateTime and reference date (i.e. 0)");
	
	if (nil != date) {
		TEST([date isEqualToDate:absoluteReferenceDate], "Date is correct");

		if (![date isEqualToDate:absoluteReferenceDate]) {
			TEST_NOTE("\tDate is incorrectly: %s", [[date description] UTF8String]);
		} else {
			longDateTimeCheck = [date classicMacLongDateTimeForTimeZone:nil];
			
			TEST(longDateTime == longDateTimeCheck, "Date can be converted back to Classic long-datetime again");
			
			if (longDateTime != longDateTimeCheck) {
				TEST_NOTE("\tResult is %lld, expected %lld", (long long)longDateTimeCheck, (long long)longDateTime);
			}
		}
	}
	
	
	date = [NSCalendarDate date];
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:[NSTimeZone defaultTimeZone]];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:[NSTimeZone defaultTimeZone]];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (now) to Classic Mac LongDateTime (in default time zone) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:nil];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:nil];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (now) to Classic Mac LongDateTime (in GMT) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	
	
	/* Check borders of daylight-savings time.  These are particularly tricky cases.  The transition times are:
	
		Sunday, April 2, 2006 at 1:59:59 AM		No		-8 hours	PST
		Sunday, April 2, 2006 at 3:00:00 AM		1 hour	-7 hours	PDT	DST starts
		Sunday, October 29, 2006 at 1:59:59 AM	1 hour	-7 hours	PDT	 
		Sunday, October 29, 2006 at 1:00:00 AM	No		-8 hours	PST	DST ends */
	
	NSTimeZone *PST = [NSTimeZone timeZoneWithAbbreviation:@"PST"];
	NSTimeZone *PDT = [NSTimeZone timeZoneWithAbbreviation:@"PDT"];
	
	// 1) Just before DST starts.
	
	date = [NSCalendarDate dateWithYear:2006 month:4 day:2 hour:1 minute:59 second:59 timeZone:PST];
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:nil];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:nil];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (just before DST starts) to Classic Mac LongDateTime (in GMT) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:[NSTimeZone defaultTimeZone]];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:[NSTimeZone defaultTimeZone]];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (just before DST starts) to Classic Mac LongDateTime (in local time zone) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	// 2) Just after DST starts.
	
	date = [date dateByAddingYears:0 months:0 days:0 hours:0 minutes:0 seconds:1];
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:nil];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:nil];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (just after DST starts) to Classic Mac LongDateTime (in GMT) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:[NSTimeZone defaultTimeZone]];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:[NSTimeZone defaultTimeZone]];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (just after DST starts) to Classic Mac LongDateTime (in local time zone) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	// 3) Just before DST ends.
		
	date = [NSCalendarDate dateWithYear:2006 month:10 day:29 hour:1 minute:59 second:59 timeZone:PDT];
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:nil];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:nil];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (just before DST ends) to Classic Mac LongDateTime (in GMT) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:[NSTimeZone defaultTimeZone]];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:[NSTimeZone defaultTimeZone]];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (just before DST ends) to Classic Mac LongDateTime (in local time zone) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	// 4) Just after DST ends.
	
	date = [date dateByAddingYears:0 months:0 days:0 hours:0 minutes:0 seconds:1];
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:nil];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:nil];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (just after DST ends) to Classic Mac LongDateTime (in GMT) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	longDateTime = [date classicMacLongDateTimeForTimeZone:[NSTimeZone defaultTimeZone]];
	dateCheck = [NSCalendarDate dateWithClassicMacLongDateTime:longDateTime timeZone:[NSTimeZone defaultTimeZone]];
	
	// Have to check the floor()'d versions since our original date had fractional seconds, but these are lost when converting to LongDateTimes.  This is expected and not an error.
	TEST(trunc([date timeIntervalSinceReferenceDate]) == trunc([dateCheck timeIntervalSinceReferenceDate]), "Convert from NSCalendarDate (just after DST ends) to Classic Mac LongDateTime (in local time zone) and back");
	
	if (trunc([date timeIntervalSinceReferenceDate]) != trunc([dateCheck timeIntervalSinceReferenceDate])) {
		TEST_NOTE("\tOriginal date: %s", [[date description] UTF8String]);
		TEST_NOTE("\tConverted date: %s", [[dateCheck description] UTF8String]);
	}
	
	END_TEST();
}

int main(int argc, char const *argv[]) {
#pragma unused (argc, argv) // We have no need for these right now.

    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    test_FractionalSeconds();
    test_ClassicMacDateTimes();
	
    [pool release];

    FINAL_SUMMARY();    
}
